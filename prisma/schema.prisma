datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PostType {
  VIDEO
  IMAGE
  TEXT
}

enum PostReactType {
  LIKE
  UNLIKE
}

model PostReact {
  id      String        @id @default(uuid())
  user_id String
  type    PostReactType
  Post    Post?         @relation(fields: [post_id], references: [id])
  post_id String?
}

model CommentLike {
  id         String  @id @default(uuid())
  user_id    String
  comment    Comment @relation(fields: [comment_id], references: [id])
  comment_id String
}

model Comment {
  id         String        @id @default(uuid())
  text       String
  image      String
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  author     User          @relation(fields: [author_id], references: [id])
  author_id  String
  post       Post          @relation(fields: [post_id], references: [id])
  post_id    String
  likes      CommentLike[]
  reply      Comment[]     @relation("CommentToComment")
  Comment    Comment?      @relation("CommentToComment", fields: [commentId], references: [id])
  commentId  String?
}

model Post {
  id         String      @id @default(uuid())
  title      String
  type       PostType    @default(IMAGE)
  file_url   String?
  content    String?
  published  Boolean     @default(true)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  author     User        @relation(fields: [author_id], references: [id])
  author_id  String
  reacts     PostReact[]
  comments   Comment[]
  tags       String[]
}

model Token {
  token_id   String   @id @default(uuid())
  token      String
  ip_address String?
  details    String?
  created_at DateTime @default(now())
  expires_at DateTime
  agent      Json?
  user       User?    @relation(fields: [user_id], references: [id])
  user_id    String?
}

enum Gender {
  male
  female
  other
}

model User {
  id                   String    @id @default(uuid())
  first_name           String
  last_name            String
  username             String    @unique
  email                String    @unique
  email_verified       Boolean   @default(false)
  email_verify_token   String    @default("")
  password             String
  password_changed_at  DateTime  @default(now())
  password_reset_token Json?
  active               Boolean   @default(true)
  tokens               Token[]
  images               Image?
  gender               Gender
  address              String?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  save_post            Post[]
  comments             Comment[]
}

model Image {
  id       String   @id @default(uuid())
  avater   String
  uploaded String[]
  cover    String
  user     User?    @relation(fields: [user_id], references: [id])
  user_id  String?
}
